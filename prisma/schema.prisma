// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Usuario {
  id_usuario      Int         @id @default(autoincrement())
  nome            String      @db.VarChar(100)
  cpf             String      @unique @db.VarChar(255)
  email           String      @unique @db.VarChar(100)
  data_nascimento DateTime    @db.Date
  cidade          Cidade      @relation(fields: [id_cidade], references: [id_cidade])
  estado          Estado      @relation(fields: [id_estado], references: [id_estado])
  senha           String      @db.VarChar(255)
  tipoUsuario     TipoUsuario @relation(fields: [id_tipo_usuario], references: [id_tipo_usuario])
  data_cadastro   DateTime    @default(now()) @db.Timestamp
  reservas        Reserva[]

  id_cidade       Int
  id_estado       Int
  id_tipo_usuario Int
  Ingresso        Ingresso[]

  @@map("usuarios")
}

model TipoUsuario {
  id_tipo_usuario Int       @id @default(autoincrement())
  descricao       String    @unique @db.VarChar(50)
  usuarios        Usuario[]

  @@map("tipo_usuarios")
}

model Cidade {
  id_cidade   Int       @id @default(autoincrement())
  nome_cidade String    @db.VarChar(100)
  id_estado   Int
  estado      Estado    @relation(fields: [id_estado], references: [id_estado], onDelete: Cascade, onUpdate: Cascade)
  usuarios    Usuario[]

  @@map("cidades")
}

model Estado {
  id_estado    Int       @id @default(autoincrement())
  nome_estado  String    @unique @db.VarChar(100)
  sigla_estado String    @unique @db.VarChar(2)
  cidades      Cidade[]
  usuarios     Usuario[]

  @@map("estados")
}

model Filme {
  id_filme             Int           @id @default(autoincrement())
  id_api               Int?
  titulo               String        @db.VarChar(255)
  slug                 String        @unique @db.VarChar(100)
  sinopse              String        @db.Text
  data_lancamento      DateTime      @db.Date
  duracao              Int
  classificacao_etaria Int
  poster_path          String        @db.VarChar(255)
  backdrop_path        String        @db.VarChar(255)
  nota_imdb            Decimal       @db.Decimal(3, 2)
  generos              Genero[]      @relation("FilmeGeneros")
  FilmeGenero          FilmeGenero[]
  sessoes              Sessao[]

  @@map("filmes")
}

model Genero {
  id_genero   Int           @id @default(autoincrement())
  id_api      Int?
  nome_genero String        @unique @db.VarChar(100)
  filmes      Filme[]       @relation("FilmeGeneros")
  FilmeGenero FilmeGenero[]

  @@map("generos")
}

model FilmeGenero {
  id_filme  Int
  id_genero Int

  filme  Filme  @relation(fields: [id_filme], references: [id_filme], onDelete: Cascade, onUpdate: Cascade)
  genero Genero @relation(fields: [id_genero], references: [id_genero], onDelete: Cascade, onUpdate: Cascade)

  @@id([id_filme, id_genero])
  @@map("filme_genero")
}

model Sala {
  id_sala      Int       @id @default(autoincrement())
  nome_sala    String    @unique @db.VarChar(100)
  capacidade   Int       @default(0)
  tipoSala     TipoSala  @relation(fields: [id_tipo_sala], references: [id_tipo_sala])
  id_tipo_sala Int
  ativo        Boolean   @default(true)
  cadeiras     Cadeira[]
  sessoes      Sessao[]

  @@map("salas")
}

model TipoSala {
  id_tipo_sala Int    @id @default(autoincrement())
  descricao    String @unique @db.VarChar(50)
  salas        Sala[]

  @@map("tipos_salas")
}

model Cadeira {
  id_cadeira     Int              @id @default(autoincrement())
  sala           Sala             @relation(fields: [id_sala], references: [id_sala], onDelete: Cascade)
  id_sala        Int
  linha          String           @db.Char(1)
  numero         Int
  ativo          Boolean          @default(true)
  Ingresso       Ingresso[]
  ReservaCadeira ReservaCadeira[]

  @@map("cadeiras")
  @@unique([id_sala, linha, numero])
}

model Sessao {
  id_sessao Int   @id @default(autoincrement())
  filme     Filme @relation(fields: [id_filme], references: [id_filme])
  id_filme  Int
  sala      Sala  @relation(fields: [id_sala], references: [id_sala])
  id_sala   Int

  data_sessao   DateTime
  reservas      Reserva[]
  Ingresso      Ingresso[]
  PrecoIngresso PrecoIngresso[]

  @@map("sessoes")
}

model Reserva {
  id_reserva   Int              @id @default(autoincrement())
  usuario      Usuario          @relation(fields: [id_usuario], references: [id_usuario])
  id_usuario   Int
  sessao       Sessao           @relation(fields: [id_sessao], references: [id_sessao])
  id_sessao    Int
  data_reserva DateTime         @default(now()) @db.Timestamp
  status       Status           @default(pendente)
  total        Decimal          @db.Decimal(10, 2)
  transacao_id String?
  Cadeiras     ReservaCadeira[]

  @@map("reservas")
}

model ReservaCadeira {
  id_reserva       Int
  id_cadeira       Int
  id_tipo_ingresso Int

  reserva      Reserva      @relation(fields: [id_reserva], references: [id_reserva], onDelete: Cascade)
  cadeira      Cadeira      @relation(fields: [id_cadeira], references: [id_cadeira])
  tipoIngresso TipoIngresso @relation(fields: [id_tipo_ingresso], references: [id_tipo])

  @@id([id_reserva, id_cadeira])
  @@map("reservas_cadeiras")
}

enum Status {
  pendente
  confirmado
  cancelado
}

model Ingresso {
  id_ingresso Int          @id @default(autoincrement())
  sessao      Sessao       @relation(fields: [id_sessao], references: [id_sessao])
  id_sessao   Int
  usuario     Usuario      @relation(fields: [id_usuario], references: [id_usuario])
  id_usuario  Int
  tipo        TipoIngresso @relation(fields: [id_tipo], references: [id_tipo])
  id_tipo     Int
  cadeira     Cadeira      @relation(fields: [id_cadeira], references: [id_cadeira])
  id_cadeira  Int
  data_compra DateTime     @default(now()) @db.Timestamp

  @@map("ingressos")
}

model TipoIngresso {
  id_tipo        Int              @id @default(autoincrement())
  descricao      String           @unique @db.VarChar(50)
  ingressos      Ingresso[]
  PrecoIngresso  PrecoIngresso[]
  ReservaCadeira ReservaCadeira[]

  @@map("tipos_ingressos")
}

model PrecoIngresso {
  id_preco  Int          @id @default(autoincrement())
  sessao    Sessao       @relation(fields: [id_sessao], references: [id_sessao], onDelete: Cascade)
  id_sessao Int
  tipo      TipoIngresso @relation(fields: [id_tipo], references: [id_tipo], onDelete: Cascade)
  id_tipo   Int
  preco     Decimal      @db.Decimal(10, 2)

  @@map("precos_ingressos")
}
